spec:
  inputs:
    # Develocity server URL
    url:
      default: 'https://scans.gradle.com'
    # Develocity Plugin version
    gradlePluginVersion:
      default: '3.17'
    # Develocity Gradle plugin repository URL, defaults in the init script to https://plugins.gradle.org/m2
    gradlePluginRepositoryUrl:
      default: ''
    # Develocity Gradle plugin repository username
    gradlePluginRepositoryUsername:
      default: ''
    # Develocity Gradle plugin repository password, strongly advised to pass a protected and masked variable
    gradlePluginRepositoryPassword:
      default: ''
    # Enforce the url over any defined locally to the project
    enforceUrl:
      default: 'false'
    # Capture file fingerprints, only set if no Develocity plugin is already present
    captureFileFingerprints:
      default: 'true'
    # Common Custom User Data Gradle Plugin version (see https://github.com/gradle/common-custom-user-data-gradle-plugin/)
    ccudPluginVersion:
      default: '1.13'
    # Allow untrusted server
    allowUntrustedServer:
      default: 'false'

---
.build_scan_links_report:
  artifacts:
    reports:
      annotations: $CI_PROJECT_DIR/build-scan-links.json

.injectDevelocityForGradle: |
  function create_gradle_report_init() {
    local init_script="${CI_PROJECT_DIR}/build-result-capture.init.groovy"
    export BUILD_SCAN_REPORT_PATH="${CI_PROJECT_DIR}/build-scan-links.json"

    cat > $init_script <<'EOF'
      import org.gradle.util.GradleVersion
      import java.util.concurrent.atomic.AtomicBoolean

      // Only run against root build. Do not run against included builds.
      def isTopLevelBuild = gradle.getParent() == null
      if (isTopLevelBuild) {
        def version = GradleVersion.current().baseVersion

        def atLeastGradle3 = version >= GradleVersion.version("3.0")
        def atLeastGradle6 = version >= GradleVersion.version("6.0")
        def captureMarker = new AtomicBoolean(false)

        if (atLeastGradle6) {
          settingsEvaluated { settings ->
            settings.pluginManager.withPlugin("com.gradle.develocity") {
              captureUsingBuildScanPublished(settings.extensions["develocity"].buildScan, settings.rootProject, captureMarker)
            }
            settings.pluginManager.withPlugin("com.gradle.enterprise") {
              captureUsingBuildScanPublished(settings.extensions["gradleEnterprise"].buildScan, settings.rootProject, captureMarker)
            }
          }
        } else if (atLeastGradle3) {
          projectsEvaluated { gradle ->
            gradle.rootProject.pluginManager.withPlugin("com.gradle.develocity") {
              captureUsingBuildScanPublished(gradle.rootProject.extensions["develocity"].buildScan, gradle.rootProject, captureMarker)
            }
            gradle.rootProject.pluginManager.withPlugin("com.gradle.build-scan") {
              captureUsingBuildScanPublished(gradle.rootProject.extensions["buildScan"], gradle.rootProject, captureMarker)
            }
          }
        }
      }

      def captureUsingBuildScanPublished(buildScanExtension, rootProject, AtomicBoolean captureMarker) {
        if (captureMarker.compareAndSet(false, true)) {
          buildScanExtension.with {
            buildScanPublished { buildScan ->
              if (System.getenv("BUILD_SCAN_REPORT_PATH")) {
                def reportFile = new File(System.getenv("BUILD_SCAN_REPORT_PATH"))
                def report
                // This might have been created by a previous Gradle invocation in the same GitLab job
                // Note that we do not handle parallel Gradle scripts invocation, which should be a very edge case in context of a GitLab job
                if (reportFile.exists()) {
                  report = new groovy.json.JsonSlurper().parseText(reportFile.text) as Report
                } else {
                  report = new Report()
                }
                report.addLink("${buildScan.buildScanUri}")
                def generator = new groovy.json.JsonGenerator.Options()
                  .excludeFieldsByName('contentHash', 'originalClassName')
                  .build()
                reportFile.text = generator.toJson(report)
              }
            }
          }
        }
      }

      class Report {
        List<Link> build_scans = []

        void addLink(String url) {
          build_scans << new Link(url)
        }
      }

      class Link {
        Map external_link

        Link(String url) {
          external_link = [ 'label': url, 'url': url ]
        }
      }
  EOF
  }

  function create_gradle_init() {
    local init_script="${CI_PROJECT_DIR}/init-script.gradle"

    cat > $init_script <<'EOF'
      import org.gradle.util.GradleVersion

      // note that there is no mechanism to share code between the initscript{} block and the main script, so some logic is duplicated

      // conditionally apply the Develocity plugin to the classpath so it can be applied to the build further down in this script
      initscript {
          def isTopLevelBuild = !gradle.parent
          if (!isTopLevelBuild) {
              return
          }

          def getInputParam = { String name ->
              def envVarName = name.toUpperCase().replace('.', '_').replace('-', '_')
              return System.getProperty(name) ?: System.getenv(envVarName)
          }

          def requestedInitScriptName = getInputParam('develocity.injection.init-script-name')
          def initScriptName = buildscript.sourceFile.name
          if (requestedInitScriptName != initScriptName) {
              return
          }

          // finish early if injection is disabled
          def gradleInjectionEnabled = getInputParam("develocity.injection-enabled")
          if (gradleInjectionEnabled != "true") {
              return
          }

          def pluginRepositoryUrl = getInputParam('gradle.plugin-repository.url')
          def pluginRepositoryUsername = getInputParam('gradle.plugin-repository.username')
          def pluginRepositoryPassword = getInputParam('gradle.plugin-repository.password')
          def develocityPluginVersion = getInputParam('develocity.plugin.version')
          def ccudPluginVersion = getInputParam('develocity.ccud-plugin.version')

          def atLeastGradle5 = GradleVersion.current() >= GradleVersion.version('5.0')
          def atLeastGradle4 = GradleVersion.current() >= GradleVersion.version('4.0')

          if (develocityPluginVersion || ccudPluginVersion && atLeastGradle4) {
              pluginRepositoryUrl = pluginRepositoryUrl ?: 'https://plugins.gradle.org/m2'
              logger.lifecycle("Develocity plugins resolution: $pluginRepositoryUrl")

              repositories {
                  maven {
                      url pluginRepositoryUrl
                      if (pluginRepositoryUsername && pluginRepositoryPassword) {
                          logger.lifecycle("Using credentials for plugin repository")
                          credentials {
                              username(pluginRepositoryUsername)
                              password(pluginRepositoryPassword)
                          }
                          authentication {
                              basic(BasicAuthentication)
                          }
                      }
                  }
              }
          }

          dependencies {
              if (develocityPluginVersion) {
                  if (atLeastGradle5) {
                      if (GradleVersion.version(develocityPluginVersion) >= GradleVersion.version("3.17")) {
                          classpath "com.gradle:develocity-gradle-plugin:$develocityPluginVersion"
                      } else {
                          classpath "com.gradle:gradle-enterprise-gradle-plugin:$develocityPluginVersion"
                      }
                  } else {
                      classpath "com.gradle:build-scan-plugin:1.16"
                  }
              }

              if (ccudPluginVersion && atLeastGradle4) {
                  classpath "com.gradle:common-custom-user-data-gradle-plugin:$ccudPluginVersion"
              }
          }
      }

      def BUILD_SCAN_PLUGIN_ID = 'com.gradle.build-scan'
      def BUILD_SCAN_PLUGIN_CLASS = 'com.gradle.scan.plugin.BuildScanPlugin'

      def GRADLE_ENTERPRISE_PLUGIN_ID = 'com.gradle.enterprise'
      def GRADLE_ENTERPRISE_PLUGIN_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterprisePlugin'
      def GRADLE_ENTERPRISE_EXTENSION_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterpriseExtension'

      def DEVELOCITY_PLUGIN_ID = 'com.gradle.develocity'
      def DEVELOCITY_PLUGIN_CLASS = 'com.gradle.develocity.agent.gradle.DevelocityPlugin'
      def DEVELOCITY_CONFIGURATION_CLASS = 'com.gradle.develocity.agent.gradle.DevelocityConfiguration'

      def SETTINGS_EXTENSION_CLASSES = [GRADLE_ENTERPRISE_EXTENSION_CLASS, DEVELOCITY_CONFIGURATION_CLASS]

      def CI_AUTO_INJECTION_CUSTOM_VALUE_NAME = 'CI auto injection'
      def CCUD_PLUGIN_ID = 'com.gradle.common-custom-user-data-gradle-plugin'
      def CCUD_PLUGIN_CLASS = 'com.gradle.CommonCustomUserDataGradlePlugin'

      def isTopLevelBuild = !gradle.parent
      if (!isTopLevelBuild) {
          return
      }

      def getInputParam = { String name ->
          def envVarName = name.toUpperCase().replace('.', '_').replace('-', '_')
          return System.getProperty(name) ?: System.getenv(envVarName)
      }

      def requestedInitScriptName = getInputParam('develocity.injection.init-script-name')
      def initScriptName = buildscript.sourceFile.name
      if (requestedInitScriptName != initScriptName) {
          logger.quiet("Ignoring init script '${initScriptName}' as requested name '${requestedInitScriptName}' does not match")
          return
      }

      // finish early if injection is disabled
      def gradleInjectionEnabled = getInputParam("develocity.injection-enabled")
      if (gradleInjectionEnabled != "true") {
          return
      }

      def develocityUrl = getInputParam('develocity.url')
      def develocityAllowUntrustedServer = Boolean.parseBoolean(getInputParam('develocity.allow-untrusted-server'))
      def develocityEnforceUrl = Boolean.parseBoolean(getInputParam('develocity.enforce-url'))
      def buildScanUploadInBackground = Boolean.parseBoolean(getInputParam('develocity.build-scan.upload-in-background'))
      def develocityCaptureFileFingerprints = Boolean.parseBoolean(getInputParam('develocity.capture-file-fingerprints'))
      def develocityPluginVersion = getInputParam('develocity.plugin.version')
      def ccudPluginVersion = getInputParam('develocity.ccud-plugin.version')
      def buildScanTermsOfUseUrl = getInputParam('develocity.terms-of-use.url')
      def buildScanTermsOfUseAgree = getInputParam('develocity.terms-of-use.agree')
      def ciAutoInjectionCustomValueValue = getInputParam('develocity.auto-injection.custom-value')

      def atLeastGradle5 = GradleVersion.current() >= GradleVersion.version('5.0')
      def atLeastGradle4 = GradleVersion.current() >= GradleVersion.version('4.0')
      def shouldApplyDevelocityPlugin = atLeastGradle5 && develocityPluginVersion && isAtLeast(develocityPluginVersion, '3.17')

      def dvOrGe = { def dvValue, def geValue ->
          if (shouldApplyDevelocityPlugin) {
              return dvValue instanceof Closure<?> ? dvValue() : dvValue
          }
          return geValue instanceof Closure<?> ? geValue() : geValue
      }

      // finish early if configuration parameters passed in via system properties are not valid/supported
      if (ccudPluginVersion && isNotAtLeast(ccudPluginVersion, '1.7')) {
          logger.warn("Common Custom User Data Gradle plugin must be at least 1.7. Configured version is $ccudPluginVersion.")
          return
      }

      // register buildScanPublished listener and optionally apply the Develocity plugin
      if (GradleVersion.current() < GradleVersion.version('6.0')) {
          rootProject {
              buildscript.configurations.getByName("classpath").incoming.afterResolve { ResolvableDependencies incoming ->
                  def resolutionResult = incoming.resolutionResult

                  if (develocityPluginVersion) {
                      def scanPluginComponent = resolutionResult.allComponents.find {
                          it.moduleVersion.with { group == "com.gradle" && ['build-scan-plugin', 'gradle-enterprise-gradle-plugin', 'develocity-gradle-plugin'].contains(name) }
                      }
                      if (!scanPluginComponent) {
                          def pluginClass = dvOrGe(DEVELOCITY_PLUGIN_CLASS, BUILD_SCAN_PLUGIN_CLASS)
                          logger.lifecycle("Applying $pluginClass via init script")
                          applyPluginExternally(pluginManager, pluginClass)
                          def rootExtension = dvOrGe(
                                  { develocity },
                                  { buildScan }
                          )
                          def buildScanExtension = dvOrGe(
                                  { rootExtension.buildScan },
                                  { rootExtension }
                          )
                          if (develocityUrl) {
                              logger.lifecycle("Connection to Develocity: $develocityUrl, allowUntrustedServer: $develocityAllowUntrustedServer, captureFileFingerprints: $develocityCaptureFileFingerprints")
                              rootExtension.server = develocityUrl
                              rootExtension.allowUntrustedServer = develocityAllowUntrustedServer
                          }
                          if (!shouldApplyDevelocityPlugin) {
                              // Develocity plugin publishes scans by default
                              buildScanExtension.publishAlways()
                          }
                          // uploadInBackground not available for build-scan-plugin 1.16
                          if (buildScanExtension.metaClass.respondsTo(buildScanExtension, 'setUploadInBackground', Boolean)) buildScanExtension.uploadInBackground = buildScanUploadInBackground
                          buildScanExtension.value CI_AUTO_INJECTION_CUSTOM_VALUE_NAME, ciAutoInjectionCustomValueValue
                          if (isAtLeast(develocityPluginVersion, '2.1') && atLeastGradle5) {
                              logger.lifecycle("Setting file fingerprint capturing: $develocityCaptureFileFingerprints")
                              if (isAtLeast(develocityPluginVersion, '3.17')) {
                                  buildScanExtension.capture.fileFingerprints.set(develocityCaptureFileFingerprints)
                              } else if (isAtLeast(develocityPluginVersion, '3.7')) {
                                  buildScanExtension.capture.taskInputFiles = develocityCaptureFileFingerprints
                              } else {
                                  buildScanExtension.captureTaskInputFiles = develocityCaptureFileFingerprints
                              }
                          }
                      }

                      if (develocityUrl && develocityEnforceUrl) {
                          logger.lifecycle("Enforcing Develocity: $develocityUrl, allowUntrustedServer: $develocityAllowUntrustedServer")
                      }

                      pluginManager.withPlugin(BUILD_SCAN_PLUGIN_ID) {
                          afterEvaluate {
                              if (develocityUrl && develocityEnforceUrl) {
                                  buildScan.server = develocityUrl
                                  buildScan.allowUntrustedServer = develocityAllowUntrustedServer
                              }
                          }

                          if (buildScanTermsOfUseUrl && buildScanTermsOfUseAgree) {
                              buildScan.termsOfServiceUrl = buildScanTermsOfUseUrl
                              buildScan.termsOfServiceAgree = buildScanTermsOfUseAgree
                          }
                      }

                      pluginManager.withPlugin(DEVELOCITY_PLUGIN_ID) {
                          afterEvaluate {
                              if (develocityUrl && develocityEnforceUrl) {
                                  develocity.server = develocityUrl
                                  develocity.allowUntrustedServer = develocityAllowUntrustedServer
                              }
                          }

                          if (buildScanTermsOfUseUrl && buildScanTermsOfUseAgree) {
                              develocity.buildScan.termsOfUseUrl = buildScanTermsOfUseUrl
                              develocity.buildScan.termsOfUseAgree = buildScanTermsOfUseAgree
                          }
                      }
                  }

                  if (ccudPluginVersion && atLeastGradle4) {
                      def ccudPluginComponent = resolutionResult.allComponents.find {
                          it.moduleVersion.with { group == "com.gradle" && name == "common-custom-user-data-gradle-plugin" }
                      }
                      if (!ccudPluginComponent) {
                          logger.lifecycle("Applying $CCUD_PLUGIN_CLASS via init script")
                          pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
                      }
                  }
              }
          }
      } else {
          gradle.settingsEvaluated { settings ->
              if (develocityPluginVersion) {
                  if (!settings.pluginManager.hasPlugin(GRADLE_ENTERPRISE_PLUGIN_ID) && !settings.pluginManager.hasPlugin(DEVELOCITY_PLUGIN_ID)) {
                      def pluginClass = dvOrGe(DEVELOCITY_PLUGIN_CLASS, GRADLE_ENTERPRISE_PLUGIN_CLASS)
                      logger.lifecycle("Applying $pluginClass via init script")
                      applyPluginExternally(settings.pluginManager, pluginClass)
                      if (develocityUrl) {
                          logger.lifecycle("Connection to Develocity: $develocityUrl, allowUntrustedServer: $develocityAllowUntrustedServer, captureFileFingerprints: $develocityCaptureFileFingerprints")
                          eachDevelocitySettingsExtension(settings, SETTINGS_EXTENSION_CLASSES) { ext ->
                              ext.server = develocityUrl
                              ext.allowUntrustedServer = develocityAllowUntrustedServer
                          }
                      }

                      eachDevelocitySettingsExtension(settings, SETTINGS_EXTENSION_CLASSES) { ext ->
                          ext.buildScan.uploadInBackground = buildScanUploadInBackground
                          ext.buildScan.value CI_AUTO_INJECTION_CUSTOM_VALUE_NAME, ciAutoInjectionCustomValueValue
                      }

                      logger.lifecycle("Setting file fingerprint capturing: $develocityCaptureFileFingerprints")
                      eachDevelocitySettingsExtension(settings, [GRADLE_ENTERPRISE_EXTENSION_CLASS]) { ext ->
                          ext.buildScan.publishAlways()
                          if (isAtLeast(develocityPluginVersion, '2.1')) {
                              if (isAtLeast(develocityPluginVersion, '3.7')) {
                                  ext.buildScan.capture.taskInputFiles = develocityCaptureFileFingerprints
                              } else {
                                  ext.buildScan.captureTaskInputFiles = develocityCaptureFileFingerprints
                              }
                          }
                      }

                      eachDevelocitySettingsExtension(settings, [DEVELOCITY_CONFIGURATION_CLASS]) { ext ->
                          ext.buildScan.capture.fileFingerprints = develocityCaptureFileFingerprints
                      }
                  }

                  if (develocityUrl && develocityEnforceUrl) {
                      logger.lifecycle("Enforcing Develocity: $develocityUrl, allowUntrustedServer: $develocityAllowUntrustedServer")
                  }

                  eachDevelocitySettingsExtension(settings, [GRADLE_ENTERPRISE_EXTENSION_CLASS]) { ext ->
                      if (develocityUrl && develocityEnforceUrl) {
                          ext.server = develocityUrl
                          ext.allowUntrustedServer = develocityAllowUntrustedServer
                      }

                      if (buildScanTermsOfUseUrl && buildScanTermsOfUseAgree) {
                          ext.buildScan.termsOfServiceUrl = buildScanTermsOfUseUrl
                          ext.buildScan.termsOfServiceAgree = buildScanTermsOfUseAgree
                      }
                  }

                  eachDevelocitySettingsExtension(settings, [DEVELOCITY_CONFIGURATION_CLASS]) { ext ->
                      if (develocityUrl && develocityEnforceUrl) {
                          ext.server = develocityUrl
                          ext.allowUntrustedServer = develocityAllowUntrustedServer
                      }

                      if (buildScanTermsOfUseUrl && buildScanTermsOfUseAgree) {
                          ext.buildScan.termsOfUseUrl = buildScanTermsOfUseUrl
                          ext.buildScan.termsOfUseAgree = buildScanTermsOfUseAgree
                      }
                  }
              }

              if (ccudPluginVersion) {
                  if (!settings.pluginManager.hasPlugin(CCUD_PLUGIN_ID)) {
                      logger.lifecycle("Applying $CCUD_PLUGIN_CLASS via init script")
                      settings.pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
                  }
              }
          }
      }

      void applyPluginExternally(def pluginManager, String pluginClassName) {
          def externallyApplied = 'develocity.externally-applied'
          def externallyAppliedDeprecated = 'gradle.enterprise.externally-applied'
          def oldValue = System.getProperty(externallyApplied)
          def oldValueDeprecated = System.getProperty(externallyAppliedDeprecated)
          System.setProperty(externallyApplied, 'true')
          System.setProperty(externallyAppliedDeprecated, 'true')
          try {
              pluginManager.apply(initscript.classLoader.loadClass(pluginClassName))
          } finally {
              if (oldValue == null) {
                  System.clearProperty(externallyApplied)
              } else {
                  System.setProperty(externallyApplied, oldValue)
              }
              if (oldValueDeprecated == null) {
                  System.clearProperty(externallyAppliedDeprecated)
              } else {
                  System.setProperty(externallyAppliedDeprecated, oldValueDeprecated)
              }
          }
      }

      static def eachDevelocitySettingsExtension(def settings, List<String> publicTypes, def action) {
          settings.extensions.extensionsSchema.elements.findAll { publicTypes.contains(it.publicType.concreteClass.name) }
                  .collect { settings[it.name] }
                  .each(action)
      }

      static boolean isAtLeast(String versionUnderTest, String referenceVersion) {
          GradleVersion.version(versionUnderTest) >= GradleVersion.version(referenceVersion)
      }

      static boolean isNotAtLeast(String versionUnderTest, String referenceVersion) {
          !isAtLeast(versionUnderTest, referenceVersion)
      }

      apply from: "${System.getenv('CI_PROJECT_DIR')}/build-result-capture.init.groovy"

  EOF

    export DEVELOCITY_INIT_SCRIPT_PATH="${init_script}"
  }

  function inject_develocity_for_gradle() {
    export "DEVELOCITY_INJECTION_ENABLED=true"
    export "DEVELOCITY_INJECTION_INIT_SCRIPT_NAME=init-script.gradle"
    export "DEVELOCITY_AUTO_INJECTION_CUSTOM_VALUE=GitLab"
    export "DEVELOCITY_URL=$[[ inputs.url ]]"
    export "DEVELOCITY_PLUGIN_VERSION=$[[ inputs.gradlePluginVersion ]]"
    export "DEVELOCITY_CCUD_PLUGIN_VERSION=$[[ inputs.ccudPluginVersion ]]"
    export "DEVELOCITY_ALLOW_UNTRUSTED_SERVER=$[[ inputs.allowUntrustedServer ]]"
    export "DEVELOCITY_ENFORCE_URL=$[[ inputs.enforceUrl ]]"
    export "DEVELOCITY_CAPTURE_FILE_FINGERPRINTS=$[[ inputs.captureFileFingerprints ]]"
    export "GRADLE_PLUGIN_REPOSITORY_URL=$[[ inputs.gradlePluginRepositoryUrl ]]"
    export "GRADLE_PLUGIN_REPOSITORY_USERNAME=$[[ inputs.gradlePluginRepositoryUsername ]]"
    export "GRADLE_PLUGIN_REPOSITORY_PASSWORD=$[[ inputs.gradlePluginRepositoryPassword ]]"
  }

  create_gradle_report_init
  create_gradle_init
  inject_develocity_for_gradle
